#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.0.16.0.3)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["Lab_audio", "RCP_BehaviorsContainer", "OnAddedToScene", "SkySphere", "AudioMixGroups", "AUDIO_26", "AUDIO_25", "AUDIO_transforms", "lab", "MicroscopeViewer", "Microscope"]
    def RealityKitTimeline "Lab_audio"
    {
        reorder nameChildren = ["Track2", "Track", "Track3", "Track4", "Track5", "Track6", "Track7", "Track8", "Track9"]
        def RealityKitTrack "Track2"
        {
            def RealityKitAction "Play_Audio"
            {
                string actionKind = "audio"
                string audioResourceName = "Room Ambience 1.cm.wav"
                bool controlPlayback = 1
                double duration = 193.20533333333333
                uniform token info:id = "87DCC6F6-DF32-4320-8D03-538FB06E35A2"
                double startTime = 0
                rel target = </Root/LabAudio/AUDIO_transforms/Room_ambience/Front_Left_Upper>

                def RealityKitStruct "handoffType"
                {
                }
            }
        }

        def RealityKitTrack "Track"
        {
            def RealityKitAction "Play_Audio"
            {
                string actionKind = "audio"
                string audioResourceName = "Room Ambience 3.cm.wav"
                bool controlPlayback = 1
                double duration = 193.20533333333333
                uniform token info:id = "E589E612-E9C5-4AD2-9ADB-DE301F60C2E5"
                double startTime = 0
                rel target = </Root/LabAudio/AUDIO_transforms/Room_ambience/Front_Right_Upper>

                def RealityKitStruct "handoffType"
                {
                }
            }
        }

        def RealityKitTrack "Track3"
        {
            def RealityKitAction "Play_Audio"
            {
                string actionKind = "audio"
                string audioResourceName = "Room Ambience 4.cm.wav"
                bool controlPlayback = 1
                double duration = 193.20533333333333
                uniform token info:id = "F95D9373-4286-4A59-AD22-0C266D8B7935"
                double startTime = 0
                rel target = </Root/LabAudio/AUDIO_transforms/Room_ambience/Rear_Left>

                def RealityKitStruct "handoffType"
                {
                }
            }
        }

        def RealityKitTrack "Track4"
        {
            def RealityKitAction "Play_Audio"
            {
                string actionKind = "audio"
                string audioResourceName = "Room Ambience 5.cm.wav"
                bool controlPlayback = 1
                double duration = 193.20533333333333
                uniform token info:id = "D50A54F2-0299-465C-A26D-A99C54AB5F9C"
                double startTime = 0
                rel target = </Root/LabAudio/AUDIO_transforms/Room_ambience/Rear_Right>

                def RealityKitStruct "handoffType"
                {
                }
            }
        }

        def RealityKitTrack "Track5"
        {
            def RealityKitAction "Play_Audio"
            {
                string actionKind = "audio"
                string audioResourceName = "Keyboard 1.cm.wav"
                bool controlPlayback = 1
                double duration = 193.20533333333333
                uniform token info:id = "52478188-85D1-4A13-B801-25DF0CD753DC"
                double startTime = 0
                rel target = </Root/LabAudio/AUDIO_transforms/Keyboard1>

                def RealityKitStruct "handoffType"
                {
                }
            }
        }

        def RealityKitTrack "Track6"
        {
            def RealityKitAction "Play_Audio"
            {
                string actionKind = "audio"
                string audioResourceName = "Keyboard 2.cm.wav"
                bool controlPlayback = 1
                double duration = 193.20533333333333
                uniform token info:id = "1C3E1231-DA60-4117-83DB-C4631ABED3A3"
                double startTime = 0
                rel target = </Root/LabAudio/AUDIO_transforms/Keyboard2>

                def RealityKitStruct "handoffType"
                {
                }
            }
        }

        def RealityKitTrack "Track7"
        {
            def RealityKitAction "Play_Audio"
            {
                string actionKind = "audio"
                string audioResourceName = "Beaker Stir 1.cm.wav"
                bool controlPlayback = 1
                double duration = 193.20533333333333
                uniform token info:id = "8CC48447-622A-4AF4-84EC-DBC9CE046744"
                double startTime = 0
                rel target = </Root/LabAudio/AUDIO_transforms/Beaker>

                def RealityKitStruct "handoffType"
                {
                }
            }
        }

        def RealityKitTrack "Track8"
        {
            def RealityKitAction "Play_Audio"
            {
                string actionKind = "audio"
                string audioResourceName = "Paperwork 1.cm.wav"
                bool controlPlayback = 1
                double duration = 193.20533333333333
                uniform token info:id = "91F9BD95-FA98-4B2F-97BA-B04ABDE5A082"
                double startTime = 0
                rel target = </Root/LabAudio/AUDIO_transforms/Paperwork1>

                def RealityKitStruct "handoffType"
                {
                }
            }
        }

        def RealityKitTrack "Track9"
        {
            def RealityKitAction "Play_Audio"
            {
                string actionKind = "audio"
                string audioResourceName = "Paperwork 2.cm.wav"
                bool controlPlayback = 1
                double duration = 193.20533333333333
                uniform token info:id = "F5458069-4D2F-4358-8EE4-2C6F8AAC26C2"
                double startTime = 0
                rel target = </Root/LabAudio/AUDIO_transforms/Paperwork1_1>

                def RealityKitStruct "handoffType"
                {
                }
            }
        }
    }

    def RealityKitComponent "RCP_BehaviorsContainer"
    {
        rel behaviors = </Root/OnAddedToScene>
        uniform token info:id = "RCP.BehaviorsContainer"
    }

    def Preliminary_Behavior "OnAddedToScene"
    {
        rel actions = </Root/OnAddedToScene/Action>
        uniform bool exclusive
        rel triggers = </Root/OnAddedToScene/Trigger>

        def Preliminary_Trigger "Trigger"
        {
            rel affectedObjects = </Root>
            token info:id = "SceneTransition"
        }

        def Preliminary_Action "Action"
        {
            rel affectedObjects = None
            rel animationLibraryKey = None
            rel animationLibraryKeyOverrideKey = </Root/OnAddedToScene/Trigger>
            token info:id = "PlayTimeline"
            int loops = 0
            int performCount = 1
            token type = "serial"
        }
    }

    def "SkySphere" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, -1.5707963, 0)
        }
        references = @SkySphere.usdz@
    )
    {
        quatf xformOp:orient = (0.7079074, 0, -0.7063053, 0)
        float3 xformOp:scale = (1, 1, 1)

        over "SkySphere_mat"
        {
            asset inputs:SkySphere_Texture = @Assets/Lab/AdobeStock_496286979.jpeg@
        }
    }

    def RealityKitComponent "AudioMixGroups"
    {
        uniform token info:id = "RealityKit.AudioMixGroups"

        def RealityKitAudioMixGroup "MixGroup"
        {
            float gain = 0
            bool mute = 0
            float speed = 1
        }
    }

    def "lab" (
        active = true
        customData = {
            float3 rotationEulerHint = (-1.5707964, 0, 0)
        }
        references = @Assets/Lab/lab.usdc@
    )
    {
        quatf xformOp:orient = (0.70710677, -0.70710677, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "_materials"
        {
            over "glass_mat"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
            }
        }
    }

    def Xform "MicroscopeViewer" (
        active = true
    )
    {
        reorder nameChildren = ["MicroscopeReferenceSphere", "AudioLibrary", "SpatialAudio", "RCP_BehaviorsContainer", "diagnosticSphere"]
        float2 ui:nodegraph:node:pos = (20, 20)
        int ui:nodegraph:node:stackingOrder = 1
        quatf xformOp:orient = (-0.019323876, 0.019323876, 0.70684266, 0.7068427)
        float3 xformOp:scale = (0.99999994, 0.9999999, 1.0000001)
        float3 xformOp:translate = (0.40769023, 1.3467324, -0.38462305)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "MicroscopeReferenceSphere" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/MicroscopeViewer/MicroscopeReferenceSphere/DefaultMaterial>
            double radius = 0.1
            float3 xformOp:scale = (1.0000001, 0.9999999, 1.0000001)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/MicroscopeViewer/MicroscopeReferenceSphere/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 0
                    color3f inputs:diffuseColor = (0.08773714, 0.21834974, 1) (
                        colorSpace = "srgb_displayp3"
                    )
                    float inputs:metallic = 0
                    float inputs:opacity = 0
                    float inputs:opacityThreshold = 1
                    float inputs:roughness = 1
                    token outputs:surface
                }
            }

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.2, 0.2)
                    float radius = 0.1
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                    }
                }
            }

            def RealityKitCustomComponent "RealityKitContent_MicroscopeViewerComponent"
            {
                uniform token info:id = "RealityKitContent.MicroscopeViewerComponent"
            }

            def RealityKitComponent "RCP_BehaviorsContainer"
            {
                rel behaviors = </Root/MicroscopeViewer/MicroscopeReferenceSphere/OnCollision>
                uniform token info:id = "RCP.BehaviorsContainer"
            }

            def Preliminary_Behavior "OnCollision"
            {
                rel actions = </Root/MicroscopeViewer/MicroscopeReferenceSphere/OnCollision/Action>
                uniform bool exclusive
                rel triggers = </Root/MicroscopeViewer/MicroscopeReferenceSphere/OnCollision/Trigger>

                def Preliminary_Trigger "Trigger"
                {
                    rel affectedObjects = </Root/MicroscopeViewer/MicroscopeReferenceSphere>
                    rel colliders = </Root/MicroscopeViewer/MicroscopeReferenceSphere>
                    token info:id = "Collide"
                }

                def Preliminary_Action "Action"
                {
                    rel affectedObjects = None
                    rel animationLibraryKey = None
                    rel animationLibraryKeyOverrideKey = </Root/MicroscopeViewer/MicroscopeReferenceSphere/OnCollision/Trigger>
                    token info:id = "PlayTimeline"
                    int loops = 0
                    int performCount = 1
                    token type = "serial"
                }
            }
        }

        def Sphere "diagnosticSphere" (
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (-7.952298e-16, -3.9696395e-16, -2.6146085e-11)
            }
        )
        {
            rel material:binding = </Root/MicroscopeViewer/diagnosticSphere/DefaultMaterial>
            double radius = 0.1
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (1, -3.976149e-16, -1.9848197e-16, -1.3073043e-11)
            float3 xformOp:scale = (0.50873184, 0.5087318, 0.5087318)
            float3 xformOp:translate = (-0.28678966, -6.556511e-7, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "DefaultMaterial"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/MicroscopeViewer/diagnosticSphere/DefaultMaterial/DefaultSurfaceShader.outputs:surface>

                def Shader "DefaultSurfaceShader"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 0.8
                    color3f inputs:diffuseColor = (0.08773714, 0.21834974, 1) (
                        colorSpace = "srgb_displayp3"
                    )
                    float inputs:metallic = 0
                    float inputs:roughness = 0.5
                    token outputs:surface
                }
            }

            def RealityKitComponent "InputTarget"
            {
                uniform token info:id = "RealityKit.InputTarget"
            }

            def RealityKitComponent "Collider"
            {
                uint group = 1
                uniform token info:id = "RealityKit.Collider"
                uint mask = 4294967295
                token type = "Default"

                def RealityKitStruct "Shape"
                {
                    float3 extent = (0.2, 0.2, 0.2)
                    float radius = 0.1
                    token shapeType = "Box"

                    def RealityKitStruct "pose"
                    {
                    }
                }
            }

            def RealityKitCustomComponent "RealityKitContent_MicroscopeViewerComponent"
            {
                uniform token info:id = "RealityKitContent.MicroscopeViewerComponent"
            }

            def RealityKitCustomComponent "RealityKitContent_GestureComponent"
            {
                bool canRotate = 0
                bool canScale = 0
                uniform token info:id = "RealityKitContent.GestureComponent"
                bool pivotOnDrag = 0
            }
        }

        def RealityKitComponent "AudioLibrary"
        {
            uniform token info:id = "RealityKit.AudioLibrary"

            def RealityKitDict "resources"
            {
                string[] keys = ["Sonic_Pulse_Hit_01.wav"]
                rel values = </Root/Sonic_Pulse_Hit_01_wav>
            }
        }

        def RealityKitCustomComponent "RealityKitContent_MicroscopeViewerComponent"
        {
            uniform token info:id = "RealityKitContent.MicroscopeViewerComponent"
        }
    }

    def RealityKitTimeline "Microscope"
    {
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Play_Audio"
            {
                string actionKind = "audio"
                string audioResourceName = "Sonic_Pulse_Hit_01.wav"
                bool controlPlayback = 1
                double duration = 13.621458333333333
                uniform token info:id = "DDFDDC11-9CD2-4521-9721-78844B51468F"
                double startTime = 0
                rel target = </Root/MicroscopeViewer>

                def RealityKitStruct "handoffType"
                {
                }
            }
        }
    }

    def RealityKitAudioFile "Sonic_Pulse_Hit_01_wav"
    {
        uniform asset file = @Audio/Sonic_Pulse_Hit_01.wav@
        uniform bool shouldLoop = 0
    }
}

