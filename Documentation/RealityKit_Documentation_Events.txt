Events
Respond to things happening in your RealityKit scene by subscribing to specific event types.
Overview
You can receive notifications to specific RealityKit events — all of which conform to the Event protocol — by subscribing to specific events. The kinds of events you can subscribe to include the following:
Two entities colliding
An entity receiving a new component
Audio playback reaching the end of its content
For example, you can receive a notification:
When two objects begin colliding by subscribing to CollisionEvents.Began event
When the scene redraws by subscribing to the SceneEvents.Update event

Event
A type that can be sent as an event.
iOS 13.0+
iPadOS 13.0+
Mac Catalyst 13.0+
macOS 10.15+
visionOS
protocol Event : Sendable
Overview
RealityKit provides a number of events you can subscribe to to get notified when things happens in a scene. For example, you can subscribe to CollisionEvents.Began to get notified when two objects begin colliding, or SceneEvents.Update to get notified when the scene redraws.
Subscribe with a closure
To subscribe to a scene event, import Combine, create a property of type Cancellable to maintain a reference to the subscription, then call subscribe(to:on:_:) or subscribe(to:on:componentType:_:) and provide a closure.
The closure is passed an RealityKit/Scene/Event object that contains information relevant to the type of event you subscribed to.
Here’s an example of subscribing to the collision begain event and retrieving the two entities involved in the collision:
 import AppKit
 import RealityKit
 import Combine


 class GameViewController: NSViewController {


     @IBOutlet var arView: ARView!
     var collisionSubscription:Cancellable?


     override func awakeFromNib() {
        let boxAnchor = try! Experience.loadBox()
        arView.scene.anchors.append(boxAnchor)


        collisionSubscription = arView.scene.subscribe(
           to: CollisionEvents.Began.self,
            on: boxAnchor
       ) { event in
           print("collision started")
           let firstEntity = event.entityA
           let secondEntity = event.entityB
           // Take appropriate action...
        }
   }
 }
Subscribe using a method
You can also subscribe to events using a function rather than a closure by using sink(receiveCompletion:receiveValue:). Here’s an example of using a function to respond to that same event:
import AppKit
import RealityKit
import Combine


class GameViewController: NSViewController {


    @IBOutlet var arView: ARView!
    var collisionSubscription:Cancellable?


    override func awakeFromNib() {
        let boxAnchor = try! Experience.loadBox()
        arView.scene.anchors.append(boxAnchor)


        collisionSubscription = arView.scene.publisher(for: CollisionEvents.Began.self,
                                                       on:nil).sink(receiveValue: onCollisionBegan)
    }


    private func onCollisionBegan(_ event:
                                  CollisionEvents.Began) {
        print("collision started")
        let firstEntity = event.entityA
        let secondEntity = event.entityB
        // Take appropriate action...
    }
}


